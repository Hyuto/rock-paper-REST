{"version":3,"sources":["App.js","scripts/script.js","reportWebVitals.js","index.js"],"names":["App","props","inputRef","React","createRef","classes","this","className","CssBaseline","Container","maxWidth","root","Typography","variant","style","margin","cards","Card","CardActionArea","ref","autoPlay","width","height","CardContent","center","gutterBottom","component","buttons","Button","onClick","video","current","navigator","mediaDevices","getUserMedia","facingMode","ideal","then","stream","srcObject","catch","e","console","log","color","canvas","prediction","context","getContext","tracks","getTracks","i","length","stop","clearRect","innerHTML","endIcon","drawImage","img","Array","from","getImageData","data","fetch","window","location","href","method","body","JSON","stringify","res","json","TakeAndPost","Component","withStyles","theme","display","spacing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41648eea.chunk.js","sourcesContent":["import React from \"react\";\nimport {start, stop, TakeAndPost} from \"./scripts/script\";\n\nimport { Button, CssBaseline, Container, Typography } from '@material-ui/core';\nimport { Card, CardActionArea, CardContent } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport SendIcon from '@material-ui/icons/Send';\n\nconst useStyles = theme => ({\n    root: {\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        'flex-direction': 'column',\n        'align-items': 'center',\n        'justify-content': 'center'\n    },\n    cards: {\n        display: 'flex',\n        'justify-content': 'center',\n    },\n    buttons: {\n        'text-align': 'center',\n        margin: theme.spacing(0.5)\n    },\n    center: {\n        'text-align': 'center',\n    }\n});\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = {\n            'canvas': React.createRef(null),\n            'video': React.createRef(null),\n            'prediction': React.createRef(null)\n        };\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div className=\"App\">\n                <CssBaseline />\n                <Container  maxWidth=\"sm\" className={classes.root}>\n                    <Typography variant=\"h5\" style={{margin: 5}}>Rock-Paper-Scissor Detector</Typography>\n                    <Container className={classes.cards}>\n                        <Card style={{maxWidth: 128, margin: 5}}>\n                            <CardActionArea>\n                                <video ref={this.inputRef['video']} autoPlay={true} width=\"128\" height=\"128\"></video>\n                                <CardContent className={classes.center}>\n                                    <Typography gutterBottom variant=\"caption\"><strong>Webcam</strong></Typography>\n                                </CardContent>\n                            </CardActionArea>\n                        </Card>\n                        <Card style={{maxWidth: 128, margin: 5}}>\n                            <CardActionArea>\n                                <canvas ref={this.inputRef['canvas']}\n                                    className=\"figure-img img-fluid rounded\"\n                                    width=\"128\"\n                                    height=\"128\">\n                                </canvas>\n                                <CardContent className={classes.center}>\n                                    <Typography gutterBottom variant=\"caption\" component=\"p\" ref={this.inputRef['prediction']}></Typography>\n                                </CardContent>\n                            </CardActionArea>\n                        </Card>\n                    </Container>\n                    <Container className={classes.buttons}>\n                        <Button variant=\"contained\" className={classes.buttons}\n                            onClick={() => start(this.inputRef['video'].current)}>\n                                Start\n                        </Button>\n                        <Button variant=\"contained\" color=\"secondary\" className={classes.buttons}\n                            onClick={() => stop(\n                                this.inputRef['canvas'].current,\n                                this.inputRef['video'].current,\n                                this.inputRef['prediction'].current\n                            )}>\n                                Stop\n                        </Button>\n                        <Button variant=\"contained\" color=\"primary\" \n                            endIcon={<SendIcon />} className={classes.buttons}\n                            onClick={() => TakeAndPost(\n                                this.inputRef['canvas'].current,\n                                this.inputRef['video'].current,\n                                this.inputRef['prediction'].current\n                            )}>\n                                Take and Predict\n                        </Button>\n                    </Container>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(useStyles)(App);","const start = (video) => {\n    if (navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({\n            video: {\n                facingMode: { \n                    ideal: \"environment\" \n                }\n            }\n        }).then((stream) => {\n            video.srcObject = stream;\n        }).catch((e) => {\n            console.log(e);\n        });\n    }\n}\n\nconst stop = (canvas, video, prediction) => {\n    if (video.srcObject !== null) {\n        let context = canvas.getContext('2d');\n        let tracks = video.srcObject.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            tracks[i].stop();\n        }\n\n        video.srcObject = null;\n        context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    prediction.innerHTML = ``;\n}\n\nconst TakeAndPost = (canvas, video, prediction) => {\n    let context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const img = Array.from(\n        context.getImageData(0, 0, canvas.width, canvas.height).data\n    );\n    prediction.innerHTML = ``;\n\n    fetch(`${window.location.href}api/`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                'image': img\n            })\n        }).then(res => res.json()).then(res => {\n            prediction.innerHTML = `Prediction <strong>${res['predicted']}</strong>`\n        }\n    )\n}\n\nexport {\n    start,\n    stop,\n    TakeAndPost\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
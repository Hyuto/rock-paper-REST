{"version":3,"sources":["App.js","scripts/script.js","reportWebVitals.js","index.js"],"names":["App","props","inputRef","React","createRef","className","ref","this","autoPlay","width","height","onClick","video","current","navigator","mediaDevices","getUserMedia","then","stream","srcObject","catch","e","console","log","canvas","prediction","context","getContext","tracks","getTracks","i","length","stop","clearRect","innerHTML","drawImage","img","Array","from","getImageData","data","fetch","window","location","href","method","body","JSON","stringify","res","json","TakeAndPost","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAqDeA,E,kDAjDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,SAAW,CACZ,OAAUC,IAAMC,UAAU,MAC1B,MAASD,IAAMC,UAAU,MACzB,WAAcD,IAAMC,UAAU,OALnB,E,0CASnB,WAAU,IAAD,OACL,OACI,sBAAKC,UAAU,gBAAf,UACI,sBAAKA,UAAU,YAAf,UACI,uBAAOC,IAAKC,KAAKL,SAAL,MAAwBM,UAAU,EAAMC,MAAM,MAAMC,OAAO,QACvE,yBAAQL,UAAU,SAAlB,UACI,wBACIC,IAAKC,KAAKL,SAAL,OACLG,UAAU,+BACVI,MAAM,MACNC,OAAO,QACX,4BACIJ,IAAKC,KAAKL,SAAL,WACLG,UAAU,qCAGtB,sBAAKA,UAAU,wBAAf,UACI,wBACIA,UAAU,eACVM,QAAS,kBChClBC,EDgC8B,EAAKV,SAAL,MAAuBW,aC/B5DC,UAAUC,aAAaC,cACvBF,UACKC,aACAC,aAAa,CAACJ,OAAO,IACrBK,MAAK,SAACC,GACHN,EAAMO,UAAYD,KAErBE,OAAM,SAACC,GACJC,QAAQC,IAAIF,OATd,IAACT,GD8BK,mBAGA,wBACIP,UAAU,eACVM,QAAS,kBCrBpB,SAACa,EAAQZ,EAAOa,GACzB,GAAwB,OAApBb,EAAMO,UAAmB,CAMzB,IALA,IAAIO,EAAUF,EAAOG,WAAW,MAC5BC,EAAShB,EACRO,UACAU,YAEIC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAC/BF,EAAOE,GAAGE,OAGdpB,EAAMO,UAAY,KAClBO,EAAQO,UAAU,EAAG,EAAGT,EAAOf,MAAOe,EAAOd,QAC7Ce,EAAWS,UAAX,IDQ+BF,CACX,EAAK9B,SAAL,OAAwBW,QACxB,EAAKX,SAAL,MAAuBW,QACvB,EAAKX,SAAL,WAA4BW,UALpC,kBAOA,wBACIR,UAAU,eACVM,QAAS,kBCXb,SAACa,EAAQZ,EAAOa,GAChC,IAAIC,EAAUF,EAAOG,WAAW,MAChCD,EAAQS,UAAUvB,EAAO,EAAG,EAAGY,EAAOf,MAAOe,EAAOd,QACpD,IAAM0B,EAAMC,MAAMC,KACdZ,EAAQa,aAAa,EAAG,EAAGf,EAAOf,MAAOe,EAAOd,QAAQ8B,MAG5DC,MAAM,GAAD,OAAIC,OAAOC,SAASC,KAApB,QAAgC,CACjCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC,MAASZ,MAE9BnB,MAAK,SAAAgC,GAAG,OAAIA,EAAIC,UAChBjC,MAAK,SAAAgC,GACFxB,EAAWS,UAAX,6BAA6Ce,EAAG,UAAhD,gBDF2BE,CACX,EAAKjD,SAAL,OAAwBW,QACxB,EAAKX,SAAL,MAAuBW,QACvB,EAAKX,SAAL,WAA4BW,UALpC,wC,GArCFV,IAAMiD,WESTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2403771c.chunk.js","sourcesContent":["import React from \"react\";\nimport {start, stop, TakeAndPost} from \"./scripts/script\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = {\n            'canvas': React.createRef(null),\n            'video': React.createRef(null),\n            'prediction': React.createRef(null)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App container\">\n                <div className=\"container\">\n                    <video ref={this.inputRef['video']} autoPlay={true} width=\"128\" height=\"128\"></video>\n                    <figure className=\"figure\">\n                        <canvas\n                            ref={this.inputRef['canvas']}\n                            className=\"figure-img img-fluid rounded\"\n                            width=\"128\"\n                            height=\"128\"></canvas>\n                        <figcaption\n                            ref={this.inputRef['prediction']}\n                            className=\"figure-caption text-center\"></figcaption>\n                    </figure>\n                </div>\n                <div className=\"container btn-wrapper\">\n                    <button\n                        className=\"btn btn-dark\"\n                        onClick={() => start(this.inputRef['video'].current)}>Start</button>\n                    <button\n                        className=\"btn btn-dark\"\n                        onClick={() => stop(\n                            this.inputRef['canvas'].current,\n                            this.inputRef['video'].current,\n                            this.inputRef['prediction'].current\n                        )}>Stop</button>\n                    <button\n                        className=\"btn btn-dark\"\n                        onClick={() => TakeAndPost(\n                            this.inputRef['canvas'].current,\n                            this.inputRef['video'].current,\n                            this.inputRef['prediction'].current\n                        )}>Take and Predict</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;","const start = (video) => {\n    if (navigator.mediaDevices.getUserMedia) {\n        navigator\n            .mediaDevices\n            .getUserMedia({video: true})\n            .then((stream) => {\n                video.srcObject = stream;\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }\n}\n\nconst stop = (canvas, video, prediction) => {\n    if (video.srcObject !== null){\n        let context = canvas.getContext('2d');\n        let tracks = video\n            .srcObject\n            .getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            tracks[i].stop();\n        }\n\n        video.srcObject = null;\n        context.clearRect(0, 0, canvas.width, canvas.height)\n        prediction.innerHTML = ``\n    }\n}\n\nconst TakeAndPost = (canvas, video, prediction) => {\n    let context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const img = Array.from(\n        context.getImageData(0, 0, canvas.width, canvas.height).data\n    );\n\n    fetch(`${window.location.href}api/`, {\n        method: \"POST\",\n        body: JSON.stringify({'image': img})\n    })\n        .then(res => res.json())\n        .then(res => {\n            prediction.innerHTML = `Prediction <strong>${res['predicted']}</strong>`\n        })\n}\n\nexport {\n    start,\n    stop,\n    TakeAndPost\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}